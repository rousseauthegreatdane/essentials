#!/usr/bin/env bash

# Check arguments.
if [ $# -lt 1 ]; then
    echo "usage: $0 <in|out|day|week|list>" >&2
    exit 1
fi

# Keep the timesheet where?
if [ -n "$TIMESHEET" ]; then
    timesheet="$TIMESHEET"
else
    timesheet="$HOME/timesheet.txt"
fi

# 3rd party time conversion functions
# Source: http://www.unix.com/tips-and-tutorials/31944-simple-date-time-calulation-bash.html
date2stamp() {
    date --utc --date "$1" +%s
}
stamp2date() {
    date --utc --date "1970-01-01 $1 sec" "+%Y-%m-%d %T"
}
dateDiff() {
    case $1 in
        -s) sec=1;     shift;;
        -m) sec=60;    shift;;
        -h) sec=3600;  shift;;
        -d) sec=86400; shift;;
        *)  sec=86400;;
    esac
    dte1=$(date2stamp $1)
    dte2=$(date2stamp $2)
    diffSec=$((dte2-dte1))
    if ((diffSec < 0)); then abs=-1; else abs=1; fi
    echo $((diffSec/sec*abs))
}

# Convert a number of seconds into hours and seconds.
secs2hours() {
    # Check arguments.
    if [ $# -lt 1 ]; then
        echo "usage: $0 <seconds>" >&2
        echo "example: $0 480" >&2
        return 1
    fi
    # Calculate how many whole hours were clocked.
    secs="$1"
    if [ "$secs" -lt 0 ]; then
        echo "fatal: invalid number of seconds: $secs" >&2
        return 2
    fi
    hours=$((secs/3600))
    # Calculate the remainder (minutes left over).
    rem=$((secs-(hours*3600)))
    mins=$((rem/60))
    # Inform the user.
    printf "%d:%02d\n" "$hours" "$mins"
}

# Calculate how many seconds you've clocked today.
sum_daily_secs() {
    # Check arguments.
    if [ $# -lt 1 ]; then
        echo "usage: $0 <date>" >&2
        echo "example: $0 1970-01-01" >&2
        return 1
    fi
    # Check whether a timesheet exists.
    if [ ! -e "$timesheet" ]; then
        echo "fatal: $timesheet does not exist." >&2
        return 1
    fi
    # List the times entered so far today.
    times=$(grep "$1" "$timesheet" | cut -dT -f2 | cut -d- -f1)
    # Count the number of entries in the list.
    entries=$(echo "$times" | wc -l)
    total=0
    # Loop through pairs of timestamps (assumes in, out, ...)
    until [ "$entries" -lt 2 ]; do
        # Pop the next two entries off the top of the list.
        these=$(echo "$times" | head -n2 | paste -s -d' ')
        # How many seconds apart are they?
        secs=$(dateDiff -s $these)
        # Add them to today's total.
        total=$((total+secs))
        # Remove the processed timestamps from the list.
        times=$(echo "$times" | tail -n$((entries-2)))
        # Update the number of entries in the list.
        entries=$((entries-2))
    done
    # When you've clocked in but not out, calculate time accumulated so far.
    if [ "$entries" -ne 0 ]; then
        # Calculate the number of seconds since the timestamp.
        secs=$(dateDiff -s $times `date +%T`)
        # Add them to the total.
        total=$((total+secs))
    fi
    echo "$total"
}

# Calculate how many seconds you've clocked this week.
sum_weekly_secs () {
    # Check arguments.
    if [ $# -lt 1 ]; then
        echo "usage: $0 <date>" >&2
        echo "example: $0 1970-01-01" >&2
        return 1
    fi
    # Keep track of the date being processed.
    dte="$1"
    # Get the day of the week as a number (1 is Monday, 7 is Sunday).
    dotw=$(date +%u -d "$dte")
    offset=0
    total=0
    # Starting with today, loop backwards to Monday, tallying as we go.
    while [ "$dotw" -gt 0 ]; do
        dte=$(date -d "$1 -$offset day" +%F 2>/dev/null)
        secs=$(sum_daily_secs "$dte")
        total=$((total+secs))
        offset=$((offset+1))
        dotw=$((dotw-1))
    done
    echo "$total"
}

# Flow control
action=""
case "$1" in
    # Clock in.
    [iI] | [iI][nN] )
        action="in"
        ;;
    # Clock out.
    [oO] | [oO][uU] | [oO][uU][tT] )
        action="out"
        ;;
    # Display the time accumulated so far today.
    [dD] | [dD][aA] | [dD][aA][yY] )
        secs=$(sum_daily_secs `date +%F`) || exit 2
        secs2hours "$secs"
        ;;
    # Display the time accumulated so far this week.
    [wW] | [wW][eE] | [wW][eE][eE] | [wW][eE][eE][kK] | [wW][kK] )
        secs=$(sum_weekly_secs `date +%F`) || exit 3
        secs2hours "$secs"
        ;;
    [lL] | [lL][sS] | [lL][iI] | [lL][iI][sS] | [lL][iI][sS][tT] | [lL][sS][tT] )
        for dte in $(cat "$timesheet.txt" | cut -dT -f1 | sort -u); do
            secs=$(sum_daily_secs "$dte") || exit 4
            echo -n "$dte $(date -d "$dte" +%a) "
            secs2hours "$secs"
        done
        ;;
    * )
        echo "$1 is not a valid argument." >&2
        exit 5
        ;;
esac

# Conditionally write to the timesheet.
if [ -n "$action" ]; then
    now=$(date +%FT%T%z)
    echo "$now" "$action" | tee -a "$timesheet"
    exit 0
fi
